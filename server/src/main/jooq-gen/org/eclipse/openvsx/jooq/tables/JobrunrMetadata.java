/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.JobrunrMetadataRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobrunrMetadata extends TableImpl<JobrunrMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.jobrunr_metadata</code>
     */
    public static final JobrunrMetadata JOBRUNR_METADATA = new JobrunrMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobrunrMetadataRecord> getRecordType() {
        return JobrunrMetadataRecord.class;
    }

    /**
     * The column <code>public.jobrunr_metadata.id</code>.
     */
    public final TableField<JobrunrMetadataRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(156).nullable(false), this, "");

    /**
     * The column <code>public.jobrunr_metadata.name</code>.
     */
    public final TableField<JobrunrMetadataRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(92).nullable(false), this, "");

    /**
     * The column <code>public.jobrunr_metadata.owner</code>.
     */
    public final TableField<JobrunrMetadataRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.jobrunr_metadata.value</code>.
     */
    public final TableField<JobrunrMetadataRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.jobrunr_metadata.createdat</code>.
     */
    public final TableField<JobrunrMetadataRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdat"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.jobrunr_metadata.updatedat</code>.
     */
    public final TableField<JobrunrMetadataRecord, LocalDateTime> UPDATEDAT = createField(DSL.name("updatedat"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private JobrunrMetadata(Name alias, Table<JobrunrMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobrunrMetadata(Name alias, Table<JobrunrMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.jobrunr_metadata</code> table reference
     */
    public JobrunrMetadata(String alias) {
        this(DSL.name(alias), JOBRUNR_METADATA);
    }

    /**
     * Create an aliased <code>public.jobrunr_metadata</code> table reference
     */
    public JobrunrMetadata(Name alias) {
        this(alias, JOBRUNR_METADATA);
    }

    /**
     * Create a <code>public.jobrunr_metadata</code> table reference
     */
    public JobrunrMetadata() {
        this(DSL.name("jobrunr_metadata"), null);
    }

    public <O extends Record> JobrunrMetadata(Table<O> child, ForeignKey<O, JobrunrMetadataRecord> key) {
        super(child, key, JOBRUNR_METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<JobrunrMetadataRecord> getPrimaryKey() {
        return Keys.JOBRUNR_METADATA_PKEY;
    }

    @Override
    public JobrunrMetadata as(String alias) {
        return new JobrunrMetadata(DSL.name(alias), this);
    }

    @Override
    public JobrunrMetadata as(Name alias) {
        return new JobrunrMetadata(alias, this);
    }

    @Override
    public JobrunrMetadata as(Table<?> alias) {
        return new JobrunrMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrMetadata rename(String name) {
        return new JobrunrMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrMetadata rename(Name name) {
        return new JobrunrMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrMetadata rename(Table<?> name) {
        return new JobrunrMetadata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
