/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.eclipse.openvsx.jooq.Indexes;
import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.ExtensionVersionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExtensionVersion extends TableImpl<ExtensionVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.extension_version</code>
     */
    public static final ExtensionVersion EXTENSION_VERSION = new ExtensionVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExtensionVersionRecord> getRecordType() {
        return ExtensionVersionRecord.class;
    }

    /**
     * The column <code>public.extension_version.id</code>.
     */
    public final TableField<ExtensionVersionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.extension_version.bugs</code>.
     */
    public final TableField<ExtensionVersionRecord, String> BUGS = createField(DSL.name("bugs"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.extension_version.description</code>.
     */
    public final TableField<ExtensionVersionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.extension_version.display_name</code>.
     */
    public final TableField<ExtensionVersionRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.extension_version.gallery_color</code>.
     */
    public final TableField<ExtensionVersionRecord, String> GALLERY_COLOR = createField(DSL.name("gallery_color"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.extension_version.gallery_theme</code>.
     */
    public final TableField<ExtensionVersionRecord, String> GALLERY_THEME = createField(DSL.name("gallery_theme"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.extension_version.homepage</code>.
     */
    public final TableField<ExtensionVersionRecord, String> HOMEPAGE = createField(DSL.name("homepage"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.extension_version.license</code>.
     */
    public final TableField<ExtensionVersionRecord, String> LICENSE = createField(DSL.name("license"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.extension_version.markdown</code>.
     */
    public final TableField<ExtensionVersionRecord, String> MARKDOWN = createField(DSL.name("markdown"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.extension_version.preview</code>.
     */
    public final TableField<ExtensionVersionRecord, Boolean> PREVIEW = createField(DSL.name("preview"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.extension_version.qna</code>.
     */
    public final TableField<ExtensionVersionRecord, String> QNA = createField(DSL.name("qna"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.extension_version.repository</code>.
     */
    public final TableField<ExtensionVersionRecord, String> REPOSITORY = createField(DSL.name("repository"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.extension_version.timestamp</code>.
     */
    public final TableField<ExtensionVersionRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.extension_version.version</code>.
     */
    public final TableField<ExtensionVersionRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.extension_version.extension_id</code>.
     */
    public final TableField<ExtensionVersionRecord, Long> EXTENSION_ID = createField(DSL.name("extension_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.extension_version.published_with_id</code>.
     */
    public final TableField<ExtensionVersionRecord, Long> PUBLISHED_WITH_ID = createField(DSL.name("published_with_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.extension_version.active</code>.
     */
    public final TableField<ExtensionVersionRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.extension_version.dependencies</code>.
     */
    public final TableField<ExtensionVersionRecord, String> DEPENDENCIES = createField(DSL.name("dependencies"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.extension_version.bundled_extensions</code>.
     */
    public final TableField<ExtensionVersionRecord, String> BUNDLED_EXTENSIONS = createField(DSL.name("bundled_extensions"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.extension_version.engines</code>.
     */
    public final TableField<ExtensionVersionRecord, String> ENGINES = createField(DSL.name("engines"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.extension_version.categories</code>.
     */
    public final TableField<ExtensionVersionRecord, String> CATEGORIES = createField(DSL.name("categories"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.extension_version.tags</code>.
     */
    public final TableField<ExtensionVersionRecord, String> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR(16384), this, "");

    /**
     * The column <code>public.extension_version.extension_kind</code>.
     */
    public final TableField<ExtensionVersionRecord, String> EXTENSION_KIND = createField(DSL.name("extension_kind"), SQLDataType.VARCHAR(255), this, "");

    private ExtensionVersion(Name alias, Table<ExtensionVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExtensionVersion(Name alias, Table<ExtensionVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.extension_version</code> table reference
     */
    public ExtensionVersion(String alias) {
        this(DSL.name(alias), EXTENSION_VERSION);
    }

    /**
     * Create an aliased <code>public.extension_version</code> table reference
     */
    public ExtensionVersion(Name alias) {
        this(alias, EXTENSION_VERSION);
    }

    /**
     * Create a <code>public.extension_version</code> table reference
     */
    public ExtensionVersion() {
        this(DSL.name("extension_version"), null);
    }

    public <O extends Record> ExtensionVersion(Table<O> child, ForeignKey<O, ExtensionVersionRecord> key) {
        super(child, key, EXTENSION_VERSION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXTENSION_VERSION__EXTENSION_ID__IDX, Indexes.EXTENSION_VERSION__PUBLISHED_WITH_ID__IDX, Indexes.EXTENSION_VERSION_EXT_AND_VER_IDX);
    }

    @Override
    public UniqueKey<ExtensionVersionRecord> getPrimaryKey() {
        return Keys.EXTENSION_VERSION_PKEY;
    }

    @Override
    public List<UniqueKey<ExtensionVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<ExtensionVersionRecord>>asList(Keys.EXTENSION_VERSION_PKEY);
    }

    @Override
    public List<ForeignKey<ExtensionVersionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExtensionVersionRecord, ?>>asList(Keys.EXTENSION_VERSION__FKKHS1EC9S9J08FGICQ9PMWU6BT, Keys.EXTENSION_VERSION__FK70KHJ8PM0VACASUIIAQ0W0R80);
    }

    public Extension extension() {
        return new Extension(this, Keys.EXTENSION_VERSION__FKKHS1EC9S9J08FGICQ9PMWU6BT);
    }

    public PersonalAccessToken personalAccessToken() {
        return new PersonalAccessToken(this, Keys.EXTENSION_VERSION__FK70KHJ8PM0VACASUIIAQ0W0R80);
    }

    @Override
    public ExtensionVersion as(String alias) {
        return new ExtensionVersion(DSL.name(alias), this);
    }

    @Override
    public ExtensionVersion as(Name alias) {
        return new ExtensionVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtensionVersion rename(String name) {
        return new ExtensionVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtensionVersion rename(Name name) {
        return new ExtensionVersion(name, null);
    }
}
