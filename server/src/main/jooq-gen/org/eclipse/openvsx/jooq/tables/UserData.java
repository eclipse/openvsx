/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.UserDataRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserData extends TableImpl<UserDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_data</code>
     */
    public static final UserData USER_DATA = new UserData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDataRecord> getRecordType() {
        return UserDataRecord.class;
    }

    /**
     * The column <code>public.user_data.id</code>.
     */
    public final TableField<UserDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_data.avatar_url</code>.
     */
    public final TableField<UserDataRecord, String> AVATAR_URL = createField(DSL.name("avatar_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_data.email</code>.
     */
    public final TableField<UserDataRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_data.full_name</code>.
     */
    public final TableField<UserDataRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_data.login_name</code>.
     */
    public final TableField<UserDataRecord, String> LOGIN_NAME = createField(DSL.name("login_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_data.provider</code>.
     */
    public final TableField<UserDataRecord, String> PROVIDER = createField(DSL.name("provider"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.user_data.auth_id</code>.
     */
    public final TableField<UserDataRecord, String> AUTH_ID = createField(DSL.name("auth_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_data.provider_url</code>.
     */
    public final TableField<UserDataRecord, String> PROVIDER_URL = createField(DSL.name("provider_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_data.role</code>.
     */
    public final TableField<UserDataRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.user_data.eclipse_data</code>.
     */
    public final TableField<UserDataRecord, String> ECLIPSE_DATA = createField(DSL.name("eclipse_data"), SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>public.user_data.eclipse_token</code>.
     */
    public final TableField<UserDataRecord, String> ECLIPSE_TOKEN = createField(DSL.name("eclipse_token"), SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>public.user_data.github_token</code>.
     */
    public final TableField<UserDataRecord, String> GITHUB_TOKEN = createField(DSL.name("github_token"), SQLDataType.VARCHAR(4096), this, "");

    private UserData(Name alias, Table<UserDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserData(Name alias, Table<UserDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_data</code> table reference
     */
    public UserData(String alias) {
        this(DSL.name(alias), USER_DATA);
    }

    /**
     * Create an aliased <code>public.user_data</code> table reference
     */
    public UserData(Name alias) {
        this(alias, USER_DATA);
    }

    /**
     * Create a <code>public.user_data</code> table reference
     */
    public UserData() {
        this(DSL.name("user_data"), null);
    }

    public <O extends Record> UserData(Table<O> child, ForeignKey<O, UserDataRecord> key) {
        super(child, key, USER_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserDataRecord> getPrimaryKey() {
        return Keys.USER_DATA_PKEY;
    }

    @Override
    public List<UniqueKey<UserDataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_USER_DATA);
    }

    @Override
    public UserData as(String alias) {
        return new UserData(DSL.name(alias), this);
    }

    @Override
    public UserData as(Name alias) {
        return new UserData(alias, this);
    }

    @Override
    public UserData as(Table<?> alias) {
        return new UserData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserData rename(String name) {
        return new UserData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserData rename(Name name) {
        return new UserData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserData rename(Table<?> name) {
        return new UserData(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
