/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.SignatureKeyPairRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SignatureKeyPair extends TableImpl<SignatureKeyPairRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.signature_key_pair</code>
     */
    public static final SignatureKeyPair SIGNATURE_KEY_PAIR = new SignatureKeyPair();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SignatureKeyPairRecord> getRecordType() {
        return SignatureKeyPairRecord.class;
    }

    /**
     * The column <code>public.signature_key_pair.id</code>.
     */
    public final TableField<SignatureKeyPairRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.signature_key_pair.public_id</code>.
     */
    public final TableField<SignatureKeyPairRecord, String> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.signature_key_pair.private_key</code>.
     */
    public final TableField<SignatureKeyPairRecord, byte[]> PRIVATE_KEY = createField(DSL.name("private_key"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>public.signature_key_pair.public_key_text</code>.
     */
    public final TableField<SignatureKeyPairRecord, String> PUBLIC_KEY_TEXT = createField(DSL.name("public_key_text"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.signature_key_pair.created</code>.
     */
    public final TableField<SignatureKeyPairRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.signature_key_pair.active</code>.
     */
    public final TableField<SignatureKeyPairRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private SignatureKeyPair(Name alias, Table<SignatureKeyPairRecord> aliased) {
        this(alias, aliased, null);
    }

    private SignatureKeyPair(Name alias, Table<SignatureKeyPairRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.signature_key_pair</code> table reference
     */
    public SignatureKeyPair(String alias) {
        this(DSL.name(alias), SIGNATURE_KEY_PAIR);
    }

    /**
     * Create an aliased <code>public.signature_key_pair</code> table reference
     */
    public SignatureKeyPair(Name alias) {
        this(alias, SIGNATURE_KEY_PAIR);
    }

    /**
     * Create a <code>public.signature_key_pair</code> table reference
     */
    public SignatureKeyPair() {
        this(DSL.name("signature_key_pair"), null);
    }

    public <O extends Record> SignatureKeyPair(Table<O> child, ForeignKey<O, SignatureKeyPairRecord> key) {
        super(child, key, SIGNATURE_KEY_PAIR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SignatureKeyPairRecord> getPrimaryKey() {
        return Keys.SIGNATURE_KEY_PAIR_PKEY;
    }

    @Override
    public List<UniqueKey<SignatureKeyPairRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SIGNATURE_KEY_PAIR_UNIQUE_PUBLIC_ID);
    }

    @Override
    public SignatureKeyPair as(String alias) {
        return new SignatureKeyPair(DSL.name(alias), this);
    }

    @Override
    public SignatureKeyPair as(Name alias) {
        return new SignatureKeyPair(alias, this);
    }

    @Override
    public SignatureKeyPair as(Table<?> alias) {
        return new SignatureKeyPair(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SignatureKeyPair rename(String name) {
        return new SignatureKeyPair(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SignatureKeyPair rename(Name name) {
        return new SignatureKeyPair(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SignatureKeyPair rename(Table<?> name) {
        return new SignatureKeyPair(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, byte[], String, LocalDateTime, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super byte[], ? super String, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super byte[], ? super String, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
