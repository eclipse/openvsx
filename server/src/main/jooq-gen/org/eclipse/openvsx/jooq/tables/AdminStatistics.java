/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Indexes;
import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.AdminStatisticsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminStatistics extends TableImpl<AdminStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.admin_statistics</code>
     */
    public static final AdminStatistics ADMIN_STATISTICS = new AdminStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminStatisticsRecord> getRecordType() {
        return AdminStatisticsRecord.class;
    }

    /**
     * The column <code>public.admin_statistics.id</code>.
     */
    public final TableField<AdminStatisticsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.admin_statistics.year</code>.
     */
    public final TableField<AdminStatisticsRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.admin_statistics.month</code>.
     */
    public final TableField<AdminStatisticsRecord, Integer> MONTH = createField(DSL.name("month"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.admin_statistics.extensions</code>.
     */
    public final TableField<AdminStatisticsRecord, Long> EXTENSIONS = createField(DSL.name("extensions"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.admin_statistics.downloads</code>.
     */
    public final TableField<AdminStatisticsRecord, Long> DOWNLOADS = createField(DSL.name("downloads"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.admin_statistics.downloads_total</code>.
     */
    public final TableField<AdminStatisticsRecord, Long> DOWNLOADS_TOTAL = createField(DSL.name("downloads_total"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.admin_statistics.publishers</code>.
     */
    public final TableField<AdminStatisticsRecord, Long> PUBLISHERS = createField(DSL.name("publishers"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.admin_statistics.average_reviews_per_extension</code>.
     */
    public final TableField<AdminStatisticsRecord, Double> AVERAGE_REVIEWS_PER_EXTENSION = createField(DSL.name("average_reviews_per_extension"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.admin_statistics.namespace_owners</code>.
     */
    public final TableField<AdminStatisticsRecord, Long> NAMESPACE_OWNERS = createField(DSL.name("namespace_owners"), SQLDataType.BIGINT.nullable(false), this, "");

    private AdminStatistics(Name alias, Table<AdminStatisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminStatistics(Name alias, Table<AdminStatisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.admin_statistics</code> table reference
     */
    public AdminStatistics(String alias) {
        this(DSL.name(alias), ADMIN_STATISTICS);
    }

    /**
     * Create an aliased <code>public.admin_statistics</code> table reference
     */
    public AdminStatistics(Name alias) {
        this(alias, ADMIN_STATISTICS);
    }

    /**
     * Create a <code>public.admin_statistics</code> table reference
     */
    public AdminStatistics() {
        this(DSL.name("admin_statistics"), null);
    }

    public <O extends Record> AdminStatistics(Table<O> child, ForeignKey<O, AdminStatisticsRecord> key) {
        super(child, key, ADMIN_STATISTICS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UNIQUE_ADMIN_STATISTICS);
    }

    @Override
    public UniqueKey<AdminStatisticsRecord> getPrimaryKey() {
        return Keys.ADMIN_STATISTICS_PKEY;
    }

    @Override
    public AdminStatistics as(String alias) {
        return new AdminStatistics(DSL.name(alias), this);
    }

    @Override
    public AdminStatistics as(Name alias) {
        return new AdminStatistics(alias, this);
    }

    @Override
    public AdminStatistics as(Table<?> alias) {
        return new AdminStatistics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminStatistics rename(String name) {
        return new AdminStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminStatistics rename(Name name) {
        return new AdminStatistics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminStatistics rename(Table<?> name) {
        return new AdminStatistics(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, Integer, Long, Long, Long, Long, Double, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Integer, ? super Integer, ? super Long, ? super Long, ? super Long, ? super Long, ? super Double, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Integer, ? super Integer, ? super Long, ? super Long, ? super Long, ? super Long, ? super Double, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
