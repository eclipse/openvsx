/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.math.BigDecimal;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.JobrunrJobsStatsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobrunrJobsStats extends TableImpl<JobrunrJobsStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.jobrunr_jobs_stats</code>
     */
    public static final JobrunrJobsStats JOBRUNR_JOBS_STATS = new JobrunrJobsStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobrunrJobsStatsRecord> getRecordType() {
        return JobrunrJobsStatsRecord.class;
    }

    /**
     * The column <code>public.jobrunr_jobs_stats.total</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> TOTAL = createField(DSL.name("total"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.scheduled</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> SCHEDULED = createField(DSL.name("scheduled"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.enqueued</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> ENQUEUED = createField(DSL.name("enqueued"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.processing</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> PROCESSING = createField(DSL.name("processing"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.failed</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> FAILED = createField(DSL.name("failed"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.succeeded</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> SUCCEEDED = createField(DSL.name("succeeded"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.alltimesucceeded</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, BigDecimal> ALLTIMESUCCEEDED = createField(DSL.name("alltimesucceeded"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.deleted</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> DELETED = createField(DSL.name("deleted"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>public.jobrunr_jobs_stats.nbrofbackgroundjobservers</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> NBROFBACKGROUNDJOBSERVERS = createField(DSL.name("nbrofbackgroundjobservers"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.nbrofrecurringjobs</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> NBROFRECURRINGJOBS = createField(DSL.name("nbrofrecurringjobs"), SQLDataType.BIGINT, this, "");

    private JobrunrJobsStats(Name alias, Table<JobrunrJobsStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobrunrJobsStats(Name alias, Table<JobrunrJobsStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "jobrunr_jobs_stats" as  WITH job_stat_results AS (
                SELECT jobrunr_jobs.state,
                   count(*) AS count
                  FROM jobrunr_jobs
                 GROUP BY ROLLUP(jobrunr_jobs.state)
               )
        SELECT COALESCE(( SELECT job_stat_results.count
                  FROM job_stat_results
                 WHERE (job_stat_results.state IS NULL)), (0)::bigint) AS total,
           COALESCE(( SELECT job_stat_results.count
                  FROM job_stat_results
                 WHERE ((job_stat_results.state)::text = 'SCHEDULED'::text)), (0)::bigint) AS scheduled,
           COALESCE(( SELECT job_stat_results.count
                  FROM job_stat_results
                 WHERE ((job_stat_results.state)::text = 'ENQUEUED'::text)), (0)::bigint) AS enqueued,
           COALESCE(( SELECT job_stat_results.count
                  FROM job_stat_results
                 WHERE ((job_stat_results.state)::text = 'PROCESSING'::text)), (0)::bigint) AS processing,
           COALESCE(( SELECT job_stat_results.count
                  FROM job_stat_results
                 WHERE ((job_stat_results.state)::text = 'FAILED'::text)), (0)::bigint) AS failed,
           COALESCE(( SELECT job_stat_results.count
                  FROM job_stat_results
                 WHERE ((job_stat_results.state)::text = 'SUCCEEDED'::text)), (0)::bigint) AS succeeded,
           COALESCE(( SELECT ((jm.value)::character(10))::numeric(10,0) AS value
                  FROM jobrunr_metadata jm
                 WHERE ((jm.id)::text = 'succeeded-jobs-counter-cluster'::text)), (0)::numeric) AS alltimesucceeded,
           COALESCE(( SELECT job_stat_results.count
                  FROM job_stat_results
                 WHERE ((job_stat_results.state)::text = 'DELETED'::text)), (0)::bigint) AS deleted,
           ( SELECT count(*) AS count
                  FROM jobrunr_backgroundjobservers) AS nbrofbackgroundjobservers,
           ( SELECT count(*) AS count
                  FROM jobrunr_recurring_jobs) AS nbrofrecurringjobs;
        """));
    }

    /**
     * Create an aliased <code>public.jobrunr_jobs_stats</code> table reference
     */
    public JobrunrJobsStats(String alias) {
        this(DSL.name(alias), JOBRUNR_JOBS_STATS);
    }

    /**
     * Create an aliased <code>public.jobrunr_jobs_stats</code> table reference
     */
    public JobrunrJobsStats(Name alias) {
        this(alias, JOBRUNR_JOBS_STATS);
    }

    /**
     * Create a <code>public.jobrunr_jobs_stats</code> table reference
     */
    public JobrunrJobsStats() {
        this(DSL.name("jobrunr_jobs_stats"), null);
    }

    public <O extends Record> JobrunrJobsStats(Table<O> child, ForeignKey<O, JobrunrJobsStatsRecord> key) {
        super(child, key, JOBRUNR_JOBS_STATS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public JobrunrJobsStats as(String alias) {
        return new JobrunrJobsStats(DSL.name(alias), this);
    }

    @Override
    public JobrunrJobsStats as(Name alias) {
        return new JobrunrJobsStats(alias, this);
    }

    @Override
    public JobrunrJobsStats as(Table<?> alias) {
        return new JobrunrJobsStats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrJobsStats rename(String name) {
        return new JobrunrJobsStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrJobsStats rename(Name name) {
        return new JobrunrJobsStats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrJobsStats rename(Table<?> name) {
        return new JobrunrJobsStats(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, Long, Long, BigDecimal, Long, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
