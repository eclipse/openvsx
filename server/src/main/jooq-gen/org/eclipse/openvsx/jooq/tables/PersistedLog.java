/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Indexes;
import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.PersistedLogRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersistedLog extends TableImpl<PersistedLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.persisted_log</code>
     */
    public static final PersistedLog PERSISTED_LOG = new PersistedLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersistedLogRecord> getRecordType() {
        return PersistedLogRecord.class;
    }

    /**
     * The column <code>public.persisted_log.id</code>.
     */
    public final TableField<PersistedLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.persisted_log.timestamp</code>.
     */
    public final TableField<PersistedLogRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.persisted_log.user_data</code>.
     */
    public final TableField<PersistedLogRecord, Long> USER_DATA = createField(DSL.name("user_data"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.persisted_log.message</code>.
     */
    public final TableField<PersistedLogRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(512), this, "");

    private PersistedLog(Name alias, Table<PersistedLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersistedLog(Name alias, Table<PersistedLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.persisted_log</code> table reference
     */
    public PersistedLog(String alias) {
        this(DSL.name(alias), PERSISTED_LOG);
    }

    /**
     * Create an aliased <code>public.persisted_log</code> table reference
     */
    public PersistedLog(Name alias) {
        this(alias, PERSISTED_LOG);
    }

    /**
     * Create a <code>public.persisted_log</code> table reference
     */
    public PersistedLog() {
        this(DSL.name("persisted_log"), null);
    }

    public <O extends Record> PersistedLog(Table<O> child, ForeignKey<O, PersistedLogRecord> key) {
        super(child, key, PERSISTED_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PERSISTED_LOG__USER_DATA__IDX);
    }

    @Override
    public UniqueKey<PersistedLogRecord> getPrimaryKey() {
        return Keys.PERSISTED_LOG_PKEY;
    }

    @Override
    public List<ForeignKey<PersistedLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PERSISTED_LOG__PERSISTED_LOG_USER_DATA_FKEY);
    }

    private transient UserData _userData;

    /**
     * Get the implicit join path to the <code>public.user_data</code> table.
     */
    public UserData userData() {
        if (_userData == null)
            _userData = new UserData(this, Keys.PERSISTED_LOG__PERSISTED_LOG_USER_DATA_FKEY);

        return _userData;
    }

    @Override
    public PersistedLog as(String alias) {
        return new PersistedLog(DSL.name(alias), this);
    }

    @Override
    public PersistedLog as(Name alias) {
        return new PersistedLog(alias, this);
    }

    @Override
    public PersistedLog as(Table<?> alias) {
        return new PersistedLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersistedLog rename(String name) {
        return new PersistedLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersistedLog rename(Name name) {
        return new PersistedLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersistedLog rename(Table<?> name) {
        return new PersistedLog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, LocalDateTime, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super LocalDateTime, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super LocalDateTime, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
