/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.EntityActiveStateRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntityActiveState extends TableImpl<EntityActiveStateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.entity_active_state</code>
     */
    public static final EntityActiveState ENTITY_ACTIVE_STATE = new EntityActiveState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityActiveStateRecord> getRecordType() {
        return EntityActiveStateRecord.class;
    }

    /**
     * The column <code>public.entity_active_state.id</code>.
     */
    public final TableField<EntityActiveStateRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.entity_active_state.entity_id</code>.
     */
    public final TableField<EntityActiveStateRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.entity_active_state.entity_type</code>.
     */
    public final TableField<EntityActiveStateRecord, String> ENTITY_TYPE = createField(DSL.name("entity_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.entity_active_state.active</code>.
     */
    public final TableField<EntityActiveStateRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.entity_active_state.timestamp</code>.
     */
    public final TableField<EntityActiveStateRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6), this, "");

    private EntityActiveState(Name alias, Table<EntityActiveStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntityActiveState(Name alias, Table<EntityActiveStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.entity_active_state</code> table reference
     */
    public EntityActiveState(String alias) {
        this(DSL.name(alias), ENTITY_ACTIVE_STATE);
    }

    /**
     * Create an aliased <code>public.entity_active_state</code> table reference
     */
    public EntityActiveState(Name alias) {
        this(alias, ENTITY_ACTIVE_STATE);
    }

    /**
     * Create a <code>public.entity_active_state</code> table reference
     */
    public EntityActiveState() {
        this(DSL.name("entity_active_state"), null);
    }

    public <O extends Record> EntityActiveState(Table<O> child, ForeignKey<O, EntityActiveStateRecord> key) {
        super(child, key, ENTITY_ACTIVE_STATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EntityActiveStateRecord> getPrimaryKey() {
        return Keys.ENTITY_ACTIVE_STATE_PKEY;
    }

    @Override
    public EntityActiveState as(String alias) {
        return new EntityActiveState(DSL.name(alias), this);
    }

    @Override
    public EntityActiveState as(Name alias) {
        return new EntityActiveState(alias, this);
    }

    @Override
    public EntityActiveState as(Table<?> alias) {
        return new EntityActiveState(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityActiveState rename(String name) {
        return new EntityActiveState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityActiveState rename(Name name) {
        return new EntityActiveState(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityActiveState rename(Table<?> name) {
        return new EntityActiveState(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, Boolean, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super String, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super String, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
