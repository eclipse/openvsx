/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.util.function.Function;

import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.MigrationItemRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MigrationItem extends TableImpl<MigrationItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.migration_item</code>
     */
    public static final MigrationItem MIGRATION_ITEM = new MigrationItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MigrationItemRecord> getRecordType() {
        return MigrationItemRecord.class;
    }

    /**
     * The column <code>public.migration_item.id</code>.
     */
    public final TableField<MigrationItemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.migration_item.migration_script</code>.
     */
    public final TableField<MigrationItemRecord, String> MIGRATION_SCRIPT = createField(DSL.name("migration_script"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>public.migration_item.entity_id</code>.
     */
    public final TableField<MigrationItemRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.migration_item.migration_scheduled</code>.
     */
    public final TableField<MigrationItemRecord, Boolean> MIGRATION_SCHEDULED = createField(DSL.name("migration_scheduled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private MigrationItem(Name alias, Table<MigrationItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private MigrationItem(Name alias, Table<MigrationItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.migration_item</code> table reference
     */
    public MigrationItem(String alias) {
        this(DSL.name(alias), MIGRATION_ITEM);
    }

    /**
     * Create an aliased <code>public.migration_item</code> table reference
     */
    public MigrationItem(Name alias) {
        this(alias, MIGRATION_ITEM);
    }

    /**
     * Create a <code>public.migration_item</code> table reference
     */
    public MigrationItem() {
        this(DSL.name("migration_item"), null);
    }

    public <O extends Record> MigrationItem(Table<O> child, ForeignKey<O, MigrationItemRecord> key) {
        super(child, key, MIGRATION_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MigrationItemRecord> getPrimaryKey() {
        return Keys.MIGRATION_ITEM_PKEY;
    }

    @Override
    public MigrationItem as(String alias) {
        return new MigrationItem(DSL.name(alias), this);
    }

    @Override
    public MigrationItem as(Name alias) {
        return new MigrationItem(alias, this);
    }

    @Override
    public MigrationItem as(Table<?> alias) {
        return new MigrationItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MigrationItem rename(String name) {
        return new MigrationItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MigrationItem rename(Name name) {
        return new MigrationItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MigrationItem rename(Table<?> name) {
        return new MigrationItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
