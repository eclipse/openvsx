/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Indexes;
import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.NamespaceMembershipRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NamespaceMembership extends TableImpl<NamespaceMembershipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.namespace_membership</code>
     */
    public static final NamespaceMembership NAMESPACE_MEMBERSHIP = new NamespaceMembership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NamespaceMembershipRecord> getRecordType() {
        return NamespaceMembershipRecord.class;
    }

    /**
     * The column <code>public.namespace_membership.id</code>.
     */
    public final TableField<NamespaceMembershipRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.namespace_membership.role</code>.
     */
    public final TableField<NamespaceMembershipRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.namespace_membership.namespace</code>.
     */
    public final TableField<NamespaceMembershipRecord, Long> NAMESPACE = createField(DSL.name("namespace"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.namespace_membership.user_data</code>.
     */
    public final TableField<NamespaceMembershipRecord, Long> USER_DATA = createField(DSL.name("user_data"), SQLDataType.BIGINT, this, "");

    private NamespaceMembership(Name alias, Table<NamespaceMembershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private NamespaceMembership(Name alias, Table<NamespaceMembershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.namespace_membership</code> table
     * reference
     */
    public NamespaceMembership(String alias) {
        this(DSL.name(alias), NAMESPACE_MEMBERSHIP);
    }

    /**
     * Create an aliased <code>public.namespace_membership</code> table
     * reference
     */
    public NamespaceMembership(Name alias) {
        this(alias, NAMESPACE_MEMBERSHIP);
    }

    /**
     * Create a <code>public.namespace_membership</code> table reference
     */
    public NamespaceMembership() {
        this(DSL.name("namespace_membership"), null);
    }

    public <O extends Record> NamespaceMembership(Table<O> child, ForeignKey<O, NamespaceMembershipRecord> key) {
        super(child, key, NAMESPACE_MEMBERSHIP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NAMESPACE_MEMBERSHIP__NAMESPACE__IDX, Indexes.NAMESPACE_MEMBERSHIP__USER_DATA__IDX);
    }

    @Override
    public UniqueKey<NamespaceMembershipRecord> getPrimaryKey() {
        return Keys.NAMESPACE_MEMBERSHIP_PKEY;
    }

    @Override
    public List<UniqueKey<NamespaceMembershipRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_NAMESPACE_MEMBERSHIP);
    }

    @Override
    public List<ForeignKey<NamespaceMembershipRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NAMESPACE_MEMBERSHIP__FKGFHWHKNULA6DO2N6WYVQETM3N, Keys.NAMESPACE_MEMBERSHIP__FKNSAMEKUTXYWVSB3S1MJDCJKYP);
    }

    private transient Namespace _namespace;
    private transient UserData _userData;

    /**
     * Get the implicit join path to the <code>public.namespace</code> table.
     */
    public Namespace namespace() {
        if (_namespace == null)
            _namespace = new Namespace(this, Keys.NAMESPACE_MEMBERSHIP__FKGFHWHKNULA6DO2N6WYVQETM3N);

        return _namespace;
    }

    /**
     * Get the implicit join path to the <code>public.user_data</code> table.
     */
    public UserData userData() {
        if (_userData == null)
            _userData = new UserData(this, Keys.NAMESPACE_MEMBERSHIP__FKNSAMEKUTXYWVSB3S1MJDCJKYP);

        return _userData;
    }

    @Override
    public NamespaceMembership as(String alias) {
        return new NamespaceMembership(DSL.name(alias), this);
    }

    @Override
    public NamespaceMembership as(Name alias) {
        return new NamespaceMembership(alias, this);
    }

    @Override
    public NamespaceMembership as(Table<?> alias) {
        return new NamespaceMembership(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NamespaceMembership rename(String name) {
        return new NamespaceMembership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NamespaceMembership rename(Name name) {
        return new NamespaceMembership(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NamespaceMembership rename(Table<?> name) {
        return new NamespaceMembership(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
