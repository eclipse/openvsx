/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.eclipse.openvsx.jooq.tables.JobrunrBackgroundjobservers;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record16;
import org.jooq.Row16;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobrunrBackgroundjobserversRecord extends UpdatableRecordImpl<JobrunrBackgroundjobserversRecord> implements Record16<String, Integer, Integer, LocalDateTime, LocalDateTime, Integer, Long, Long, BigDecimal, Long, Long, Long, BigDecimal, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.jobrunr_backgroundjobservers.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.jobrunr_backgroundjobservers.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.workerpoolsize</code>.
     */
    public void setWorkerpoolsize(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.workerpoolsize</code>.
     */
    public Integer getWorkerpoolsize() {
        return (Integer) get(1);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.pollintervalinseconds</code>.
     */
    public void setPollintervalinseconds(Integer value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.pollintervalinseconds</code>.
     */
    public Integer getPollintervalinseconds() {
        return (Integer) get(2);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.firstheartbeat</code>.
     */
    public void setFirstheartbeat(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.firstheartbeat</code>.
     */
    public LocalDateTime getFirstheartbeat() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.lastheartbeat</code>.
     */
    public void setLastheartbeat(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.lastheartbeat</code>.
     */
    public LocalDateTime getLastheartbeat() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.jobrunr_backgroundjobservers.running</code>.
     */
    public void setRunning(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.jobrunr_backgroundjobservers.running</code>.
     */
    public Integer getRunning() {
        return (Integer) get(5);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.systemtotalmemory</code>.
     */
    public void setSystemtotalmemory(Long value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.systemtotalmemory</code>.
     */
    public Long getSystemtotalmemory() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.systemfreememory</code>.
     */
    public void setSystemfreememory(Long value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.systemfreememory</code>.
     */
    public Long getSystemfreememory() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.systemcpuload</code>.
     */
    public void setSystemcpuload(BigDecimal value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.systemcpuload</code>.
     */
    public BigDecimal getSystemcpuload() {
        return (BigDecimal) get(8);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.processmaxmemory</code>.
     */
    public void setProcessmaxmemory(Long value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.processmaxmemory</code>.
     */
    public Long getProcessmaxmemory() {
        return (Long) get(9);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.processfreememory</code>.
     */
    public void setProcessfreememory(Long value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.processfreememory</code>.
     */
    public Long getProcessfreememory() {
        return (Long) get(10);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.processallocatedmemory</code>.
     */
    public void setProcessallocatedmemory(Long value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.processallocatedmemory</code>.
     */
    public Long getProcessallocatedmemory() {
        return (Long) get(11);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.processcpuload</code>.
     */
    public void setProcesscpuload(BigDecimal value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.processcpuload</code>.
     */
    public BigDecimal getProcesscpuload() {
        return (BigDecimal) get(12);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.deletesucceededjobsafter</code>.
     */
    public void setDeletesucceededjobsafter(String value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.deletesucceededjobsafter</code>.
     */
    public String getDeletesucceededjobsafter() {
        return (String) get(13);
    }

    /**
     * Setter for
     * <code>public.jobrunr_backgroundjobservers.permanentlydeletejobsafter</code>.
     */
    public void setPermanentlydeletejobsafter(String value) {
        set(14, value);
    }

    /**
     * Getter for
     * <code>public.jobrunr_backgroundjobservers.permanentlydeletejobsafter</code>.
     */
    public String getPermanentlydeletejobsafter() {
        return (String) get(14);
    }

    /**
     * Setter for <code>public.jobrunr_backgroundjobservers.name</code>.
     */
    public void setName(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>public.jobrunr_backgroundjobservers.name</code>.
     */
    public String getName() {
        return (String) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record16 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, Integer, Integer, LocalDateTime, LocalDateTime, Integer, Long, Long, BigDecimal, Long, Long, Long, BigDecimal, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    @Override
    public Row16<String, Integer, Integer, LocalDateTime, LocalDateTime, Integer, Long, Long, BigDecimal, Long, Long, Long, BigDecimal, String, String, String> valuesRow() {
        return (Row16) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.WORKERPOOLSIZE;
    }

    @Override
    public Field<Integer> field3() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.POLLINTERVALINSECONDS;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.FIRSTHEARTBEAT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.LASTHEARTBEAT;
    }

    @Override
    public Field<Integer> field6() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.RUNNING;
    }

    @Override
    public Field<Long> field7() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.SYSTEMTOTALMEMORY;
    }

    @Override
    public Field<Long> field8() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.SYSTEMFREEMEMORY;
    }

    @Override
    public Field<BigDecimal> field9() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.SYSTEMCPULOAD;
    }

    @Override
    public Field<Long> field10() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.PROCESSMAXMEMORY;
    }

    @Override
    public Field<Long> field11() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.PROCESSFREEMEMORY;
    }

    @Override
    public Field<Long> field12() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.PROCESSALLOCATEDMEMORY;
    }

    @Override
    public Field<BigDecimal> field13() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.PROCESSCPULOAD;
    }

    @Override
    public Field<String> field14() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.DELETESUCCEEDEDJOBSAFTER;
    }

    @Override
    public Field<String> field15() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.PERMANENTLYDELETEJOBSAFTER;
    }

    @Override
    public Field<String> field16() {
        return JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS.NAME;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getWorkerpoolsize();
    }

    @Override
    public Integer component3() {
        return getPollintervalinseconds();
    }

    @Override
    public LocalDateTime component4() {
        return getFirstheartbeat();
    }

    @Override
    public LocalDateTime component5() {
        return getLastheartbeat();
    }

    @Override
    public Integer component6() {
        return getRunning();
    }

    @Override
    public Long component7() {
        return getSystemtotalmemory();
    }

    @Override
    public Long component8() {
        return getSystemfreememory();
    }

    @Override
    public BigDecimal component9() {
        return getSystemcpuload();
    }

    @Override
    public Long component10() {
        return getProcessmaxmemory();
    }

    @Override
    public Long component11() {
        return getProcessfreememory();
    }

    @Override
    public Long component12() {
        return getProcessallocatedmemory();
    }

    @Override
    public BigDecimal component13() {
        return getProcesscpuload();
    }

    @Override
    public String component14() {
        return getDeletesucceededjobsafter();
    }

    @Override
    public String component15() {
        return getPermanentlydeletejobsafter();
    }

    @Override
    public String component16() {
        return getName();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getWorkerpoolsize();
    }

    @Override
    public Integer value3() {
        return getPollintervalinseconds();
    }

    @Override
    public LocalDateTime value4() {
        return getFirstheartbeat();
    }

    @Override
    public LocalDateTime value5() {
        return getLastheartbeat();
    }

    @Override
    public Integer value6() {
        return getRunning();
    }

    @Override
    public Long value7() {
        return getSystemtotalmemory();
    }

    @Override
    public Long value8() {
        return getSystemfreememory();
    }

    @Override
    public BigDecimal value9() {
        return getSystemcpuload();
    }

    @Override
    public Long value10() {
        return getProcessmaxmemory();
    }

    @Override
    public Long value11() {
        return getProcessfreememory();
    }

    @Override
    public Long value12() {
        return getProcessallocatedmemory();
    }

    @Override
    public BigDecimal value13() {
        return getProcesscpuload();
    }

    @Override
    public String value14() {
        return getDeletesucceededjobsafter();
    }

    @Override
    public String value15() {
        return getPermanentlydeletejobsafter();
    }

    @Override
    public String value16() {
        return getName();
    }

    @Override
    public JobrunrBackgroundjobserversRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value2(Integer value) {
        setWorkerpoolsize(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value3(Integer value) {
        setPollintervalinseconds(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value4(LocalDateTime value) {
        setFirstheartbeat(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value5(LocalDateTime value) {
        setLastheartbeat(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value6(Integer value) {
        setRunning(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value7(Long value) {
        setSystemtotalmemory(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value8(Long value) {
        setSystemfreememory(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value9(BigDecimal value) {
        setSystemcpuload(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value10(Long value) {
        setProcessmaxmemory(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value11(Long value) {
        setProcessfreememory(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value12(Long value) {
        setProcessallocatedmemory(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value13(BigDecimal value) {
        setProcesscpuload(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value14(String value) {
        setDeletesucceededjobsafter(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value15(String value) {
        setPermanentlydeletejobsafter(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord value16(String value) {
        setName(value);
        return this;
    }

    @Override
    public JobrunrBackgroundjobserversRecord values(String value1, Integer value2, Integer value3, LocalDateTime value4, LocalDateTime value5, Integer value6, Long value7, Long value8, BigDecimal value9, Long value10, Long value11, Long value12, BigDecimal value13, String value14, String value15, String value16) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JobrunrBackgroundjobserversRecord
     */
    public JobrunrBackgroundjobserversRecord() {
        super(JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS);
    }

    /**
     * Create a detached, initialised JobrunrBackgroundjobserversRecord
     */
    public JobrunrBackgroundjobserversRecord(String id, Integer workerpoolsize, Integer pollintervalinseconds, LocalDateTime firstheartbeat, LocalDateTime lastheartbeat, Integer running, Long systemtotalmemory, Long systemfreememory, BigDecimal systemcpuload, Long processmaxmemory, Long processfreememory, Long processallocatedmemory, BigDecimal processcpuload, String deletesucceededjobsafter, String permanentlydeletejobsafter, String name) {
        super(JobrunrBackgroundjobservers.JOBRUNR_BACKGROUNDJOBSERVERS);

        setId(id);
        setWorkerpoolsize(workerpoolsize);
        setPollintervalinseconds(pollintervalinseconds);
        setFirstheartbeat(firstheartbeat);
        setLastheartbeat(lastheartbeat);
        setRunning(running);
        setSystemtotalmemory(systemtotalmemory);
        setSystemfreememory(systemfreememory);
        setSystemcpuload(systemcpuload);
        setProcessmaxmemory(processmaxmemory);
        setProcessfreememory(processfreememory);
        setProcessallocatedmemory(processallocatedmemory);
        setProcesscpuload(processcpuload);
        setDeletesucceededjobsafter(deletesucceededjobsafter);
        setPermanentlydeletejobsafter(permanentlydeletejobsafter);
        setName(name);
        resetChangedOnNotNull();
    }
}
