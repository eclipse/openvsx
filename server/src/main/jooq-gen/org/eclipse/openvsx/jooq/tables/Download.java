/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.eclipse.openvsx.jooq.Indexes;
import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.DownloadRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Download extends TableImpl<DownloadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.download</code>
     */
    public static final Download DOWNLOAD = new Download();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DownloadRecord> getRecordType() {
        return DownloadRecord.class;
    }

    /**
     * The column <code>public.download.id</code>.
     */
    public final TableField<DownloadRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.download.file_resource_id_not_fk</code>.
     */
    public final TableField<DownloadRecord, Long> FILE_RESOURCE_ID_NOT_FK = createField(DSL.name("file_resource_id_not_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.download.timestamp</code>.
     */
    public final TableField<DownloadRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.download.amount</code>.
     */
    public final TableField<DownloadRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    private Download(Name alias, Table<DownloadRecord> aliased) {
        this(alias, aliased, null);
    }

    private Download(Name alias, Table<DownloadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.download</code> table reference
     */
    public Download(String alias) {
        this(DSL.name(alias), DOWNLOAD);
    }

    /**
     * Create an aliased <code>public.download</code> table reference
     */
    public Download(Name alias) {
        this(alias, DOWNLOAD);
    }

    /**
     * Create a <code>public.download</code> table reference
     */
    public Download() {
        this(DSL.name("download"), null);
    }

    public <O extends Record> Download(Table<O> child, ForeignKey<O, DownloadRecord> key) {
        super(child, key, DOWNLOAD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DOWNLOAD_TIMESTAMP_BRIN_IDX);
    }

    @Override
    public UniqueKey<DownloadRecord> getPrimaryKey() {
        return Keys.DOWNLOAD_PKEY;
    }

    @Override
    public Download as(String alias) {
        return new Download(DSL.name(alias), this);
    }

    @Override
    public Download as(Name alias) {
        return new Download(alias, this);
    }

    @Override
    public Download as(Table<?> alias) {
        return new Download(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Download rename(String name) {
        return new Download(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Download rename(Name name) {
        return new Download(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Download rename(Table<?> name) {
        return new Download(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
