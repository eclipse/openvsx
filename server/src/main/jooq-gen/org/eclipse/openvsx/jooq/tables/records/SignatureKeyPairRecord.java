/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables.records;


import java.time.LocalDateTime;

import org.eclipse.openvsx.jooq.tables.SignatureKeyPair;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SignatureKeyPairRecord extends UpdatableRecordImpl<SignatureKeyPairRecord> implements Record6<Long, String, byte[], String, LocalDateTime, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.signature_key_pair.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.signature_key_pair.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.signature_key_pair.public_id</code>.
     */
    public void setPublicId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.signature_key_pair.public_id</code>.
     */
    public String getPublicId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.signature_key_pair.private_key</code>.
     */
    public void setPrivateKey(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.signature_key_pair.private_key</code>.
     */
    public byte[] getPrivateKey() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>public.signature_key_pair.public_key_text</code>.
     */
    public void setPublicKeyText(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.signature_key_pair.public_key_text</code>.
     */
    public String getPublicKeyText() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.signature_key_pair.created</code>.
     */
    public void setCreated(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.signature_key_pair.created</code>.
     */
    public LocalDateTime getCreated() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.signature_key_pair.active</code>.
     */
    public void setActive(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.signature_key_pair.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, byte[], String, LocalDateTime, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, String, byte[], String, LocalDateTime, Boolean> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SignatureKeyPair.SIGNATURE_KEY_PAIR.ID;
    }

    @Override
    public Field<String> field2() {
        return SignatureKeyPair.SIGNATURE_KEY_PAIR.PUBLIC_ID;
    }

    @Override
    public Field<byte[]> field3() {
        return SignatureKeyPair.SIGNATURE_KEY_PAIR.PRIVATE_KEY;
    }

    @Override
    public Field<String> field4() {
        return SignatureKeyPair.SIGNATURE_KEY_PAIR.PUBLIC_KEY_TEXT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SignatureKeyPair.SIGNATURE_KEY_PAIR.CREATED;
    }

    @Override
    public Field<Boolean> field6() {
        return SignatureKeyPair.SIGNATURE_KEY_PAIR.ACTIVE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getPublicId();
    }

    @Override
    public byte[] component3() {
        return getPrivateKey();
    }

    @Override
    public String component4() {
        return getPublicKeyText();
    }

    @Override
    public LocalDateTime component5() {
        return getCreated();
    }

    @Override
    public Boolean component6() {
        return getActive();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getPublicId();
    }

    @Override
    public byte[] value3() {
        return getPrivateKey();
    }

    @Override
    public String value4() {
        return getPublicKeyText();
    }

    @Override
    public LocalDateTime value5() {
        return getCreated();
    }

    @Override
    public Boolean value6() {
        return getActive();
    }

    @Override
    public SignatureKeyPairRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public SignatureKeyPairRecord value2(String value) {
        setPublicId(value);
        return this;
    }

    @Override
    public SignatureKeyPairRecord value3(byte[] value) {
        setPrivateKey(value);
        return this;
    }

    @Override
    public SignatureKeyPairRecord value4(String value) {
        setPublicKeyText(value);
        return this;
    }

    @Override
    public SignatureKeyPairRecord value5(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public SignatureKeyPairRecord value6(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public SignatureKeyPairRecord values(Long value1, String value2, byte[] value3, String value4, LocalDateTime value5, Boolean value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SignatureKeyPairRecord
     */
    public SignatureKeyPairRecord() {
        super(SignatureKeyPair.SIGNATURE_KEY_PAIR);
    }

    /**
     * Create a detached, initialised SignatureKeyPairRecord
     */
    public SignatureKeyPairRecord(Long id, String publicId, byte[] privateKey, String publicKeyText, LocalDateTime created, Boolean active) {
        super(SignatureKeyPair.SIGNATURE_KEY_PAIR);

        setId(id);
        setPublicId(publicId);
        setPrivateKey(privateKey);
        setPublicKeyText(publicKeyText);
        setCreated(created);
        setActive(active);
        resetChangedOnNotNull();
    }
}
